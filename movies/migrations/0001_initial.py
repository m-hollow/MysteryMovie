# Generated by Django 3.1.2 on 2020-10-20 20:02

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.PositiveSmallIntegerField()),
                ('active_round', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Is this round currently active?')),
                ('round_completed', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Round Already Completed')),
                ('date_started', models.DateField(default=datetime.date.today, null=True, verbose_name='Round Start Date')),
                ('date_finished', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='Round Finished Date')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Movie Title')),
                ('year', models.PositiveIntegerField(null=True, verbose_name='Year Released')),
                ('watched', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Watched Yet?')),
                ('date_watched', models.DateField(default=datetime.date.today, null=True, verbose_name='Date Watched')),
                ('slug', models.SlugField(default='', max_length=150)),
                ('chosen_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chosen_movie', to=settings.AUTH_USER_MODEL, verbose_name='Chosen By User')),
                ('game_round', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movies_from_round', to='movies.gameround')),
            ],
            options={
                'ordering': ['date_watched'],
            },
        ),
        migrations.CreateModel(
            name='Trophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('condition', models.CharField(max_length=1000)),
                ('point_value', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TrophyProfileDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserRoundDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner_bool', models.BooleanField(default=False)),
                ('correct_guess_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('known_movie_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('unseen_movie_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('trophy_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('game_round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.gameround')),
                ('trophies_won', models.ManyToManyField(related_name='related_user_round_details', to='movies.Trophy', verbose_name='Trophies Won This Round')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
                ('total_correct_guess_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('total_known_movie_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('total_unseen_movie_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('total_trophy_points', models.PositiveSmallIntegerField(default=0, null=True)),
                ('is_mmg_admin', models.BooleanField(choices=[(True, 'Yes'), (False, 'Nope')], default=False)),
                ('total_trophies', models.ManyToManyField(related_name='related_profiles', through='movies.TrophyProfileDetail', to='movies.Trophy')),
            ],
        ),
        migrations.CreateModel(
            name='UserMovieDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_user_movie', models.BooleanField(choices=[(True, 'Yes'), (False, 'Nope')], default=False, verbose_name='Is this your movie?')),
                ('seen_previously', models.BooleanField(choices=[(True, 'Yes'), (False, 'Nope')], default=False, verbose_name='Had you seen this movie previously?')),
                ('heard_of', models.BooleanField(choices=[(True, 'Yes'), (False, 'Nope')], default=False, verbose_name='Had you heard of this movie before?')),
                ('star_rating', models.PositiveSmallIntegerField(choices=[(1, 'It destroyed me... One Star'), (2, 'New dimensions of suffering... Two Stars'), (3, "Damage sustained, but I'll recover... Three Stars"), (4, 'Surprisingly light on hurting... Four Stars'), (5, "It didn't hurt at all!... Five Stars")], default=3, verbose_name='Deep Hurting Level')),
                ('comments', models.TextField(blank=True, default='', max_length=1000)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_guess', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_via_guess', to=settings.AUTH_USER_MODEL, verbose_name="Who do you think chose this?  (Leave blank if it's your movie)")),
            ],
        ),
        migrations.AddField(
            model_name='trophyprofiledetail',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.userprofile'),
        ),
        migrations.AddField(
            model_name='trophyprofiledetail',
            name='trophy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.trophy'),
        ),
        migrations.AddField(
            model_name='movie',
            name='users',
            field=models.ManyToManyField(related_name='related_movies', through='movies.UserMovieDetail', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gameround',
            name='participants',
            field=models.ManyToManyField(related_name='related_game_rounds', through='movies.UserRoundDetail', to=settings.AUTH_USER_MODEL, verbose_name='Participating Members'),
        ),
        migrations.AddField(
            model_name='gameround',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Winner'),
        ),
        migrations.AddConstraint(
            model_name='usermoviedetail',
            constraint=models.UniqueConstraint(fields=('user', 'movie'), name='unique_user_movie_pairs'),
        ),
    ]
